{"version":3,"sources":["LineGraph.js","BarGraph.js","App.js","index.js"],"names":["LineGraph","props","width","height","data","dataKey","xField","type","domain","fields","lines","map","x","field","Math","max","f","d","l","key","stroke","color","strokeWidth","BarGraph","totalVal","r","value","reduce","A","B","toFixed","barSize","scale","padding","left","right","fill","background","unit","useData","file","useState","_data","setData","length","Papa","parse","download","header","complete","res","substring","filter","App","regione","setRegione","dayspan","setDayspan","w","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","timeSpan","ndays","Date","setDate","getDate","toISOString","split","maxDate","sort","reverse","lastVal","totale_positivi","totale_casi","useSoluzione","min","onChange","a","b","i","arr","c","lastDate","addDays","date","Array","from","keys","forEach","push","previsione_positivi","parseInt","usePrediction","useLastData","name","denominazione_regione","nuovi_positivi","options","unique","label","s","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f11cbfb.chunk.js","sourcesContent":["import React from 'react'\nimport { LineChart, XAxis, YAxis, Legend, Tooltip, CartesianGrid, Line } from 'recharts'\n\nconst LineGraph = (props) => {\n  const max = () => {\n    const data = props.data\n    const fields = props.lines.map(x => x.field)\n\n    return Math.max(...fields.map(f => Math.max(...data.map(d => d[f]))))\n  }\n\n  return (\n  <LineChart\n    width={props.width}\n    height={props.height}\n    data={props.data}\n  >\n    <XAxis dataKey={props.xField}/>\n    <YAxis type='number' domain={[0, max()]}/>\n\n    <CartesianGrid />\n\n    <Legend />\n    <Tooltip />\n\n    {\n      props.lines\n      .map(l => <Line key={l.field} type={l.type} dataKey={l.field} stroke={l.color} strokeWidth={l.strokeWidth} />)\n    }\n  </LineChart>\n  )\n}\n\nexport default LineGraph\n","import React from 'react'\nimport { Area, ComposedChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, LabelList } from 'recharts'\n\nconst BarGraph = props => {\n  const totalVal =\n    props.data\n    .map(r => r.value)\n    .reduce((A, B) => A + B, 0)\n\n  const data =\n    props.data.map(r => {\n        r[\"percentage\"] = (r.value / totalVal * 100).toFixed(2)\n\n        return r\n    })\n\n  return (\n    <ComposedChart\n      width={props.width}\n      height={props.height}\n      data={data}\n      barSize={20}\n    >\n      <XAxis dataKey=\"name\" scale=\"point\" padding={{ left: 2, right: 2 }} />\n      <YAxis />\n      <Tooltip />\n      <CartesianGrid />\n      <Bar dataKey=\"value\" barSize={5} fill=\"#82ca9d\" background={{ fill: '#eee' }} />\n      <Area dataKey=\"percentage\" fill=\"#8884d8\" unit=\"%\" />\n    </ComposedChart>\n  )\n}\n\nexport default BarGraph\n","import React, { useState, useLayoutEffect } from 'react'\nimport unique from 'array-unique'\n\nimport LineGraph from './LineGraph'\nimport BarGraph from './BarGraph'\n\nimport Papa from 'papaparse'\nimport Slider from 'rc-slider'\nimport Select from 'react-select'\nimport 'rc-slider/assets/index.css'\n\nconst useWindowSize = () => {\n  const [size, setSize] = useState([0, 0])\n\n  useLayoutEffect(() => {\n    const updateSize = () => setSize([window.innerWidth, window.innerHeight])\n\n    window.addEventListener('resize', updateSize)\n    updateSize()\n\n    return () => window.removeEventListener('resize', updateSize)\n  }, [])\n\n  return size\n}\n\nconst useData = (file) => {\n  const [_data, setData] = useState([])\n\n  if(_data.length === 0)\n    Papa.parse(file, {\n      download: true,\n      header: true,\n      complete: (res => {\n          const data =\n            res.data\n            .map(x => {\n              x.data = x.data.substring(0, 10)\n\n              return x\n            })\n            .filter(x => x.data !== '')\n\n          setData(data)\n        }\n      )\n    })\n\n  return _data\n}\n\nconst App = () => {\n  const [regione, setRegione] = useState(\"Lazio\")\n  const [dayspan, setDayspan] = useState(30)\n  const screenWidth = useWindowSize()[0]\n  const w = screenWidth - 30\n\n  const timeSpan = (ndays) => {\n    const d = new Date()\n    d.setDate(d.getDate() - ndays)\n    return d.toISOString().split('T')[0]\n  }\n\n  const useSoluzione = () => {\n    const data = useData('dati/nazione.csv')\n\n    const maxDate = data.map(x => x[\"data\"]).sort().reverse()[0]\n    const lastVal = data.filter(x => x.data === maxDate)[0]\n\n    return lastVal ? (1-lastVal.totale_positivi/lastVal.totale_casi)*100 : 0\n  }\n\n  const useLastData = (file) => {\n    const data = useData(file)\n\n    const maxDate = data.map(x => x[\"data\"]).sort().reverse()[0]\n    const lastVal = data.filter(x => x.data === maxDate)\n\n    return lastVal ? lastVal : []\n  }\n\n  const usePrediction = (file, dayspan) => {\n    const data =\n      useData(file)\n        .filter(x => x.data >= timeSpan(dayspan))\n        .sort((a, b) => b.data > a.data ? -1 : 1)\n        .map((x, i, arr) => {\n          x[\"previsione_positivi\"]=(i == arr.length-1 ? x.totale_positivi : null)\n          return x\n        })\n\n    const c =\n      data\n        .map(x => x.totale_positivi)\n        .reduce((a, b, i, arr) => ((a*i)+(b-arr[i-1]))/(i+1) || 0, 0)\n\n    const lastDate =\n      data[data.length-1] ? new Date(data[data.length-1].data) : new Date()\n\n    const lastVal =\n      data[data.length-1] ? data[data.length-1].totale_positivi : 0\n\n    const addDays = (date, ndays) => {\n      const d = new Date(date)\n\n      d.setDate(date.getDate() + ndays)\n\n      return d\n    }\n\n    Array.from(Array(30).keys())\n      .map(x => x+1)\n      .forEach(i => {\n        data.push({\n          data: addDays(lastDate, i).toISOString().split('T')[0],\n          previsione_positivi: Math.max(parseInt(lastVal)+(c*(i)), 0).toFixed(0),\n          totale_positivi: i == 0 ? Math.max(parseInt(lastVal)+(c*(i)), 0).toFixed(0) : null\n        })\n      })\n\n    return data\n  }\n\n  return (\n    <>\n      <h1><b>Coronavisual</b></h1>\n      <hr/>\n\n      <h3>Soluzione: {useSoluzione().toFixed(2)}%</h3>\n      <hr/>\n\n      <div>\n        <Slider\n          min={1}\n          max={365}\n          value={dayspan}\n          onChange={setDayspan}\n        />\n        <h4>Dati: ultimi {dayspan} giorni</h4>\n      </div>\n\n      <h3>Italia: previsioni attivi prossimo mese</h3>\n      <LineGraph\n        width={w}\n        height={w/2}\n        data={\n          usePrediction('dati/nazione.csv', dayspan)\n        }\n        xField=\"data\"\n        lines={\n          [\n            {field: \"totale_positivi\", color: \"#ff84d8\", strokeWidth: 2, type: \"monotone\"},\n            {field: \"previsione_positivi\", color: \"#1184d8\", strokeWidth: 2, type: \"monotone\"},\n          ]\n        }\n      />\n\n\n      <h3>Italia: distribuzione nuovi casi ad oggi</h3>\n      <BarGraph\n        width={w}\n        height={w/2}\n        data={\n          useLastData('dati/regioni.csv')\n          .map(r => { return { name: r.denominazione_regione, value: parseInt(r.nuovi_positivi) }})\n          .sort((A, B) => B.value - A.value)\n        }\n      />\n\n\n      <h3>Italia: delta</h3>\n      <LineGraph\n        width={w}\n        height={w/2}\n        data={\n          useData('dati/nazione.csv')\n          .filter(x => x.data >= timeSpan(dayspan))\n        }\n        xField=\"data\"\n        lines={\n          [\n            {field: \"nuovi_risolti\",  color: \"#8884d8\", strokeWidth: 2, type: \"monotone\"},\n            {field: \"nuovi_positivi\", color: \"#82ca9d\", strokeWidth: 2, type: \"monotone\"},\n          ]\n        }\n      />\n\n      <h3>Italia: attivi</h3>\n      <LineGraph\n        width={w}\n        height={w/2}\n        data={\n          useData('dati/nazione.csv')\n          .filter(x => x.data >= timeSpan(dayspan))\n        }\n        xField=\"data\"\n        lines={\n          [\n            {field: \"totale_positivi\", color: \"#ff84d8\", strokeWidth: 2, type: \"monotone\"},\n          ]\n        }\n      />\n\n      <h3>Italia: regioni</h3>\n      <Select\n        options={\n          unique(\n            useData('dati/regioni.csv')\n            .map(x => x.denominazione_regione)\n          )\n          .map(x => { return { value: x, label: x }})\n        }\n        onChange={s => setRegione(s.value)}\n        value={{label: regione, value: regione}}\n      />\n      <LineGraph\n        width={w}\n        height={w/2}\n        data={\n          useData('dati/regioni.csv')\n          .filter(x => x.data >= timeSpan(dayspan))\n          .filter(x => x.denominazione_regione === regione)\n        }\n        xField=\"data\"\n        lines={\n          [\n            {field: \"nuovi_risolti\",  color: \"#8884d8\", strokeWidth: 2, type: \"monotone\"},\n            {field: \"nuovi_positivi\", color: \"#82ca9d\", strokeWidth: 2, type: \"monotone\"},\n          ]\n        }\n      />\n\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'react-skeleton-css/styles/skeleton.2.0.4.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}