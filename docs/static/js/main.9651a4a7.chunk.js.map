{"version":3,"sources":["graphs/regioni.js","graphs/nazione.js","graphs/nazione-attivi.js","App.js","index.js"],"names":["Graph","props","options","state","data","v","filter","r","map","denominazione_regione","Array","from","Set","value","label","regione","substring","render","onChange","s","setState","width","height","dataKey","type","domain","dataMax","stroke","strokeWidth","Papa","parse","download","header","complete","Component","Regioni","Nazione","NazioneAttivi","App","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","w","ReactDOM","document","getElementById"],"mappings":"qQAOMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAgBRC,QAAU,kBACR,EAAKC,MAAMC,MArBGC,EAuBV,EAAKF,MAAMC,KAAKA,KACfE,QAAO,SAAAC,GAAC,MAAe,KAAXA,EAAEH,QACdI,KAAI,SAAAD,GAAC,OAAIA,EAAEE,yBAzBIC,MAAMC,KAAK,IAAIC,IAAIP,KA2BpCG,KAAI,SAAAH,GAAO,MAAO,CAACQ,MAAOR,EAAGS,MAAOT,MACrC,GA5BW,IAACA,GAGG,EA2BnBD,KAAO,SAACW,GAAD,OACL,EAAKZ,MAAMC,MACX,EAAKD,MAAMC,KAAKA,KACfI,KAAI,SAAAD,GAEH,OADAA,EAAEH,KAAOG,EAAEH,KAAKY,UAAU,EAAG,IACtBT,KAERD,QAAO,SAAAC,GAAC,OAAIA,EAAEE,wBAA0B,EAAKN,MAAMY,WACnDT,QAAO,SAAAC,GAAC,OAAIA,EAAEH,MAAQ,iBAnCN,EAsCnBa,OAAS,kBACL,oCACE,gCAAM,EAAKd,MAAMY,QAAjB,KAEA,kBAAC,IAAD,CACEb,QAAS,EAAKA,UACdW,MAAO,EAAKV,MAAMY,QAClBG,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAACL,QAASI,EAAEN,WAG3C,kBAAC,IAAD,CACEQ,MAAO,EAAKpB,MAAMoB,MAAQ,GAC1BC,OAAQ,IACRlB,KAAM,EAAKA,KAAK,EAAKD,MAAMY,UAE3B,kBAAC,IAAD,CAAOQ,QAAQ,SACf,kBAAC,IAAD,CAAOC,KAAK,SAASC,OAAQ,CAAC,EAAG,SAAAC,GAAO,OAAc,EAAVA,MAE5C,kBAAC,IAAD,MAEA,kBAAC,IAAD,MACA,kBAAC,IAAD,MAEA,kBAAC,IAAD,CAAMF,KAAK,WAAWD,QAAQ,gBAAgBI,OAAO,UAAUC,YAAa,IAC5E,kBAAC,IAAD,CAAMJ,KAAK,WAAWD,QAAQ,iBAAiBI,OAAO,UAAUC,YAAa,OA3DnF,EAAKzB,MAAQ,CACXC,KAAM,KACNW,QAAS,SALM,E,gEASE,IAAD,OAClBc,IAAKC,MAAM,mBAAoB,CAC7BC,UAAU,EACVC,QAAQ,EACRC,SAAU,SAAA7B,GAAI,OAAI,EAAKgB,SAAS,CAAChB,KAAMA,W,GAdzB8B,aAuELC,EAHC,SAAClC,GAAD,OACd,kBAAC,EAAD,CAAOoB,MAAOpB,EAAMoB,SCxEhBrB,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAeRG,KAAO,kBACL,EAAKD,MAAMC,MACX,EAAKD,MAAMC,KAAKA,KACfI,KAAI,SAAAD,GAEH,OADAA,EAAEH,KAAOG,EAAEH,KAAKY,UAAU,EAAG,IACtBT,KAERD,QAAO,SAAAC,GAAC,OAAIA,EAAEH,MAAQ,iBAvBN,EA0BnBa,OAAS,kBACL,kBAAC,IAAD,CACEI,MAAO,EAAKpB,MAAMoB,MAAQ,GAC1BC,OAAQ,IACRlB,KAAM,EAAKA,QAEX,kBAAC,IAAD,CAAOmB,QAAQ,SACf,kBAAC,IAAD,CAAOC,KAAK,WAEZ,kBAAC,IAAD,MAEA,kBAAC,IAAD,MACA,kBAAC,IAAD,MAEA,kBAAC,IAAD,CAAMA,KAAK,WAAWD,QAAQ,gBAAgBI,OAAO,UAAUC,YAAa,IAC5E,kBAAC,IAAD,CAAMJ,KAAK,WAAWD,QAAQ,iBAAiBI,OAAO,UAAUC,YAAa,MAtCjF,EAAKzB,MAAQ,CACXC,KAAM,MAJS,E,gEAQE,IAAD,OAClByB,IAAKC,MAAM,mBAAoB,CAC7BC,UAAU,EACVC,QAAQ,EACRC,SAAU,SAAA7B,GAAI,OAAI,EAAKgB,SAAS,CAAChB,KAAMA,W,GAbzB8B,aAiDLE,EAHC,SAACnC,GAAD,OACd,kBAAC,EAAD,CAAOoB,MAAOpB,EAAMoB,SC/ChBrB,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAeRG,KAAO,kBACL,EAAKD,MAAMC,MACX,EAAKD,MAAMC,KAAKA,KACfI,KAAI,SAAAD,GAEH,OADAA,EAAEH,KAAOG,EAAEH,KAAKY,UAAU,EAAG,IACtBT,KAERD,QAAO,SAAAC,GAAC,OAAIA,EAAEH,MAAQ,iBAvBN,EA0BnBa,OAAS,kBACL,kBAAC,IAAD,CACEI,MAAO,EAAKpB,MAAMoB,MAAQ,GAC1BC,OAAQ,IACRlB,KAAM,EAAKA,QAEX,kBAAC,IAAD,CAAOmB,QAAQ,SACf,kBAAC,IAAD,CAAOC,KAAK,WAEZ,kBAAC,IAAD,MAEA,kBAAC,IAAD,MACA,kBAAC,IAAD,MAEA,kBAAC,IAAD,CAAMA,KAAK,WAAWD,QAAQ,kBAAkBI,OAAO,UAAUC,YAAa,MArClF,EAAKzB,MAAQ,CACXC,KAAM,MAJS,E,gEAQE,IAAD,OAClByB,IAAKC,MAAM,mBAAoB,CAC7BC,UAAU,EACVC,QAAQ,EACRC,SAAU,SAAA7B,GAAI,OAAI,EAAKgB,SAAS,CAAChB,KAAMA,W,GAbzB8B,aAgDLG,EAHO,SAACpC,GAAD,OACpB,kBAAC,EAAD,CAAOoB,MAAOpB,EAAMoB,SCNPiB,EAvBH,WAAO,IAAD,EAfI,WAAO,IAAD,EACFC,mBAAS,CAAC,EAAG,IADX,mBACnBC,EADmB,KACbC,EADa,KAY1B,OATAC,2BAAgB,WACd,IAAMC,EAAa,kBAAMF,EAAQ,CAACG,OAAOC,WAAYD,OAAOE,eAK5D,OAHAF,OAAOG,iBAAiB,SAAUJ,GAClCA,IAEO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IAEIH,EAKMS,GAFG,mBAEXC,EAFW,UAIhB,OACE,oCACE,4BAAI,4CACJ,6BAEA,uCACA,kBAAC,EAAD,CAAS7B,MAAO6B,IAChB,6BAEA,6CACA,kBAAC,EAAD,CAAS7B,MAAO6B,IAChB,6BAEA,8CACA,kBAAC,EAAD,CAAe7B,MAAO6B,M,OClC5BC,IAASlC,OAAO,kBAAC,EAAD,MAASmC,SAASC,eAAe,W","file":"static/js/main.9651a4a7.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { LineChart, XAxis, YAxis, Legend, Tooltip, CartesianGrid, Line } from 'recharts'\nimport Papa from 'papaparse'\nimport Select from 'react-select'\n\nconst distinct = (v) => Array.from(new Set(v))\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      data: null,\n      regione: \"Lazio\"\n    }\n  }\n\n  componentDidMount() {\n    Papa.parse('dati/regioni.csv', {\n      download: true,\n      header: true,\n      complete: data => this.setState({data: data})\n    })\n  }\n\n  options = () =>\n    this.state.data ?\n      distinct(\n        this.state.data.data\n        .filter(r => r.data !== '')\n        .map(r => r.denominazione_regione)\n      )\n      .map(v => { return {value: v, label: v} })\n    : []\n\n  data = (regione) =>\n    this.state.data &&\n    this.state.data.data\n    .map(r => {\n      r.data = r.data.substring(0, 10)\n      return r\n    })\n    .filter(r => r.denominazione_regione === this.state.regione)\n    .filter(r => r.data >= '2020-05-01')\n\n\n  render = () =>\n      <>\n        <h2> {this.state.regione} </h2>\n\n        <Select\n          options={this.options()}\n          value={this.state.regione}\n          onChange={s => this.setState({regione: s.value})}\n        />\n\n        <LineChart\n          width={this.props.width - 30}\n          height={500}\n          data={this.data(this.state.regione)}\n        >\n          <XAxis dataKey=\"data\"/>\n          <YAxis type='number' domain={[0, dataMax => dataMax * 8]}/>\n\n          <CartesianGrid />\n\n          <Legend />\n          <Tooltip/>\n\n          <Line type=\"monotone\" dataKey=\"nuovi_risolti\" stroke=\"#8884d8\" strokeWidth={2}/>\n          <Line type=\"monotone\" dataKey=\"nuovi_positivi\" stroke=\"#82ca9d\" strokeWidth={2}/>\n        </LineChart>\n      </>\n}\n\nconst Regioni = (props) =>\n  <Graph width={props.width}/>\n\nexport default Regioni\n","import React, { Component } from 'react'\nimport { LineChart, XAxis, YAxis, Legend, Tooltip, CartesianGrid, Line } from 'recharts'\nimport Papa from 'papaparse'\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      data: null,\n    }\n  }\n\n  componentDidMount() {\n    Papa.parse('dati/nazione.csv', {\n      download: true,\n      header: true,\n      complete: data => this.setState({data: data})\n    })\n  }\n\n  data = () =>\n    this.state.data &&\n    this.state.data.data\n    .map(r => {\n      r.data = r.data.substring(0, 10)\n      return r\n    })\n    .filter(r => r.data >= '2020-05-01')\n\n\n  render = () =>\n      <LineChart\n        width={this.props.width - 30}\n        height={500}\n        data={this.data()}\n      >\n        <XAxis dataKey=\"data\"/>\n        <YAxis type='number'/>\n\n        <CartesianGrid />\n\n        <Legend />\n        <Tooltip/>\n\n        <Line type=\"monotone\" dataKey=\"nuovi_risolti\" stroke=\"#8884d8\" strokeWidth={2}/>\n        <Line type=\"monotone\" dataKey=\"nuovi_positivi\" stroke=\"#82ca9d\" strokeWidth={2}/>\n      </LineChart>\n}\n\nconst Nazione = (props) =>\n  <Graph width={props.width}/>\n\nexport default Nazione\n","import React, { Component } from 'react'\nimport { LineChart, XAxis, YAxis, Legend, Tooltip, CartesianGrid, Line } from 'recharts'\nimport Papa from 'papaparse'\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      data: null,\n    }\n  }\n\n  componentDidMount() {\n    Papa.parse('dati/nazione.csv', {\n      download: true,\n      header: true,\n      complete: data => this.setState({data: data})\n    })\n  }\n\n  data = () =>\n    this.state.data &&\n    this.state.data.data\n    .map(r => {\n      r.data = r.data.substring(0, 10)\n      return r\n    })\n    .filter(r => r.data >= '2020-05-01')\n\n\n  render = () =>\n      <LineChart\n        width={this.props.width - 30}\n        height={500}\n        data={this.data()}\n      >\n        <XAxis dataKey=\"data\"/>\n        <YAxis type='number'/>\n\n        <CartesianGrid />\n\n        <Legend />\n        <Tooltip/>\n\n        <Line type=\"monotone\" dataKey=\"totale_positivi\" stroke=\"#ff84d8\" strokeWidth={2}/>\n      </LineChart>\n}\n\nconst NazioneAttivi = (props) =>\n  <Graph width={props.width}/>\n\nexport default NazioneAttivi\n","import React, { useState, useLayoutEffect } from 'react'\n\nimport Regioni from './graphs/regioni'\nimport Nazione from './graphs/nazione'\nimport NazioneAttivi from './graphs/nazione-attivi'\n\nconst useWindowSize = () => {\n  const [size, setSize] = useState([0, 0]);\n\n  useLayoutEffect(() => {\n    const updateSize = () => setSize([window.innerWidth, window.innerHeight])\n\n    window.addEventListener('resize', updateSize)\n    updateSize()\n\n    return () => window.removeEventListener('resize', updateSize)\n  }, [])\n\n  return size\n}\n\nconst App = () => {\n\n  var [w, h] = useWindowSize()\n\n  return (\n    <>\n      <h1><b>Coronavisual</b></h1>\n      <hr/>\n\n      <h1>Regioni</h1>\n      <Regioni width={w}/>\n      <hr/>\n\n      <h1>Nazione delta</h1>\n      <Nazione width={w} />\n      <hr/>\n\n      <h1>Nazione attivi</h1>\n      <NazioneAttivi width={w} />\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'react-skeleton-css/styles/skeleton.2.0.4.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}