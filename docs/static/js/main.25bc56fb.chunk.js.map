{"version":3,"sources":["Graph.js","App.js","index.js"],"names":["Graph","props","width","height","data","dataKey","xField","type","domain","fields","lines","map","x","field","Math","max","f","d","l","key","stroke","color","strokeWidth","useData","file","useState","_data","setData","length","Papa","parse","download","header","complete","res","substring","filter","App","regione","setRegione","dayspan","setDayspan","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","screenWidth","w","timeSpan","ndays","Date","setDate","getDate","toISOString","split","min","value","onChange","options","unique","denominazione_regione","label","s","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25bc56fb.chunk.js","sourcesContent":["import React from 'react'\nimport { LineChart, XAxis, YAxis, Legend, Tooltip, CartesianGrid, Line } from 'recharts'\n\nconst Graph = (props) => {\n  const max = () => {\n    const data = props.data\n    const fields = props.lines.map(x => x.field)\n\n    return Math.max(...fields.map(f => Math.max(...data.map(d => d[f]))))\n  }\n\n  return (\n  <LineChart\n    width={props.width}\n    height={props.height}\n    data={props.data}\n  >\n    <XAxis dataKey={props.xField}/>\n    <YAxis type='number' domain={[0, max()]}/>\n\n    <CartesianGrid />\n\n    <Legend />\n    <Tooltip />\n\n    {\n      props.lines\n      .map(l => <Line key={l.field} type={l.type} dataKey={l.field} stroke={l.color} strokeWidth={l.strokeWidth} />)\n    }\n  </LineChart>\n  )\n}\n\nexport default Graph\n","import React, { useState, useLayoutEffect } from 'react'\nimport unique from 'array-unique'\n\nimport Graph from './Graph'\nimport Papa from 'papaparse'\nimport Slider from 'rc-slider'\nimport Select from 'react-select'\nimport 'rc-slider/assets/index.css'\n\nconst useWindowSize = () => {\n  const [size, setSize] = useState([0, 0])\n\n  useLayoutEffect(() => {\n    const updateSize = () => setSize([window.innerWidth, window.innerHeight])\n\n    window.addEventListener('resize', updateSize)\n    updateSize()\n\n    return () => window.removeEventListener('resize', updateSize)\n  }, [])\n\n  return size\n}\n\nconst useData = (file) => {\n  const [_data, setData] = useState([])\n\n  if(_data.length === 0)\n    Papa.parse(file, {\n      download: true,\n      header: true,\n      complete: (res => {\n          const data =\n            res.data\n            .map(x => {\n              x.data = x.data.substring(0, 10)\n\n              return x\n            })\n            .filter(x => x.data !== '')\n\n          setData(data)\n        }\n      )\n    })\n\n  return _data\n}\n\n\nconst App = () => {\n  const [regione, setRegione] = useState(\"Lazio\")\n  const [dayspan, setDayspan] = useState(30)\n  const [screenWidth, screenHeight] = useWindowSize()\n  const w = screenWidth - 30\n\n  const timeSpan = (ndays) => {\n    const d = new Date()\n    d.setDate(d.getDate() - ndays)\n    return d.toISOString().split('T')[0]\n  }\n\n  return (\n    <>\n      <h1><b>Coronavisual</b></h1>\n      <hr/>\n\n      <div>\n        <Slider\n          min={1}\n          max={365}\n          value={dayspan}\n          onChange={setDayspan}\n        />\n        <h4>Dati: ultimi {dayspan} giorni</h4>\n      </div>\n\n      <h3>Italia: regioni</h3>\n      <Select\n        options={\n          unique(\n            useData('dati/regioni.csv')\n            .map(x => x.denominazione_regione)\n          )\n          .map(x => { return { value: x, label: x }})\n        }\n        onChange={s => setRegione(s.value)}\n        value={{label: regione, value: regione}}\n      />\n      <Graph\n        width={w}\n        height={w/2}\n        data={\n          useData('dati/regioni.csv')\n          .filter(x => x.data >= timeSpan(dayspan))\n          .filter(x => x.denominazione_regione === regione)\n        }\n        xField=\"data\"\n        lines={\n          [\n            {field: \"nuovi_risolti\",  color: \"#8884d8\", strokeWidth: 2, type: \"monotone\"},\n            {field: \"nuovi_positivi\", color: \"#82ca9d\", strokeWidth: 2, type: \"monotone\"},\n          ]\n        }\n      />\n\n      <h3>Italia: delta</h3>\n      <Graph\n        width={w}\n        height={w/2}\n        data={\n          useData('dati/nazione.csv')\n          .filter(x => x.data >= timeSpan(dayspan))\n        }\n        xField=\"data\"\n        lines={\n          [\n            {field: \"nuovi_risolti\",  color: \"#8884d8\", strokeWidth: 2, type: \"monotone\"},\n            {field: \"nuovi_positivi\", color: \"#82ca9d\", strokeWidth: 2, type: \"monotone\"},\n          ]\n        }\n      />\n\n      <h3>Italia: attivi</h3>\n      <Graph\n        width={w}\n        height={w/2}\n        data={\n          useData('dati/nazione.csv')\n          .filter(x => x.data >= timeSpan(dayspan))\n        }\n        xField=\"data\"\n        lines={\n          [\n            {field: \"totale_positivi\", color: \"#ff84d8\", strokeWidth: 2, type: \"monotone\"},\n          ]\n        }\n      />\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'react-skeleton-css/styles/skeleton.2.0.4.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}